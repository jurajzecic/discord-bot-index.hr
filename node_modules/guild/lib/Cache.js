module.exports = Cache;

var INITIAL_CACHE_HIT_VALUE = 1;
var MINIMUM_EVICTION_PROBABILITY = 0.10;
var MAXIMUM_EVICTION_PROBABILITY = 0.90;
var HIT_HEADROOM_COEFFICIENT = 1.1;

/**
 *
 * @param size {Integer}
 * @constructor
 */
function Cache(size) {
    'use strict';

    this._maxCacheSize = size;
    this._currentCacheSize = 0;
    this._largestCacheHit = INITIAL_CACHE_HIT_VALUE;
    this._cachedObjectContainers = [];
    this._cacheKeyToIndexMap = {};
}

/**
 *
 * @param key {String}
 * @param object {Object}
 */
Cache.prototype.put = function (key, object) {
    'use strict';

    this._evictIfNeeded();

    var cacheContainer = this._getCacheContainerForKey(key);

    if (cacheContainer) {
        cacheContainer.object = object;
    } else {
        this._addObjectToCache(key, object);
    }
};

/**
 *
 * @param key {String}
 * @returns {Object}
 */
Cache.prototype.get = function (key) {
    'use strict';

    var cacheContainer = this._getCacheContainerForKey(key);
    this._incrementCachedObjectHit(cacheContainer);

    return cacheContainer && cacheContainer.object;
};


/**
 *
 * @param key
 */
Cache.prototype.remove = function (key) {
    'use strict';

    var itemIndex = this._getCacheContainerIndexForKey(key);

    this._rebuildCache(function (index) {
        return (itemIndex !== index);
    }, false);
};

/**
 *
 * @returns {number}
 */
Cache.prototype.currentSize = function () {
    'use strict';

    return this._currentCacheSize;
};

/**
 * Empties the cache and resets its state.
 */
Cache.prototype.reset = function () {
    'use strict';

    this._currentCacheSize = 0;
    this._largestCacheHit = INITIAL_CACHE_HIT_VALUE;
    this._cachedObjectContainers = [];
    this._cacheKeyToIndexMap = {};
};

/**
 *
 * @param key
 * @returns {*}
 * @private
 */
Cache.prototype._getCacheContainerForKey = function (key) {
    'use strict';

    var cacheContainer;
    var cacheIndexForKey = this._getCacheContainerIndexForKey(key);

    if (cacheIndexForKey !== null) {
        cacheContainer = this._cachedObjectContainers[cacheIndexForKey];
    }

    return cacheContainer;
};

/**
 *
 * @param key
 * @returns {Number}
 * @private
 */
Cache.prototype._getCacheContainerIndexForKey = function (key) {
    'use strict';

    return this._cacheKeyToIndexMap[key];
};

/**
 *
 * @param cachedObjectContainer
 * @private
 */
Cache.prototype._incrementCachedObjectHit = function (cachedObjectContainer) {
    'use strict';

    if (cachedObjectContainer) {
        cachedObjectContainer.hitCount++;

        if (cachedObjectContainer.hitCount > this._largestCacheHit) {
            this._largestCacheHit = cachedObjectContainer.hitCount;
        }
    }
};

/**
 *
 * @param key {String}
 * @param object {Object}
 * @private
 */
Cache.prototype._addObjectToCache = function (key, object) {
    'use strict';

    if (!this._cacheIsFull()) {
        var newCacheContainer = this._newCachedObject(key, object);
        var newObjectCacheLength = this._cachedObjectContainers.push(newCacheContainer);

        this._cacheKeyToIndexMap[key] = (newObjectCacheLength - 1);
        this._incrementCurrentCacheSize();
    }
};

/**
 *
 * @param key
 * @param object
 * @returns {{key: *, object: *, hitCount: number}}
 * @private
 */
Cache.prototype._newCachedObject = function (key, object) {
    'use strict';

    return {
        key: key,
        object: object,
        hitCount: INITIAL_CACHE_HIT_VALUE
    };
};

/**
 *
 * @private
 */
Cache.prototype._incrementCurrentCacheSize = function () {
    'use strict';

    this._currentCacheSize++;
};

/**
 *
 * @returns {boolean}
 * @private
 */
Cache.prototype._cacheIsFull = function () {
    'use strict';

    return (this._currentCacheSize >= this._maxCacheSize);
};


/**
 *
 * @private
 */
Cache.prototype._evictIfNeeded = function () {
    'use strict';

    if (this._cacheIsFull()) {
        this._evict();
    }
};

/**
 *
 * @private
 */
Cache.prototype._evict = function () {
    'use strict';

    var hitCeiling = this._largestCacheHit * HIT_HEADROOM_COEFFICIENT;

    this._rebuildCache(function (index, container) {
        var evictionSeed = Math.random();
        var evictionProbability = this._calculateEvictionProbabilityForCacheContainer(container, hitCeiling);
        return (evictionSeed >= evictionProbability);
    }.bind(this), true);
};

/**
 *
 * @param keepItemDecision
 * @param resetHitCounts
 * @private
 */
Cache.prototype._rebuildCache = function (keepItemDecision, resetHitCounts) {

    var newCachedObjects = [];
    var newCacheSize = 0;
    var newCacheToIndexMap = {};
    var currentCacheSize = this._currentCacheSize;

    this._largestCacheHit = INITIAL_CACHE_HIT_VALUE;

    for (var index = 0; index < currentCacheSize; index++) {

        var container = this._cachedObjectContainers[index];
        var shouldKeepItem = container && keepItemDecision(index, container);

        if (shouldKeepItem) {

            container.hitCount = resetHitCounts ? INITIAL_CACHE_HIT_VALUE : container.hitCount;

            newCachedObjects.push(container);
            newCacheToIndexMap[container.key] = (newCacheSize);
            newCacheSize++;

            this._largestCacheHit = (!resetHitCounts && (container.hitCount > this._largestCacheHit)) ? container.hitCount : this._largestCacheHit;
        }
    }

    this._cachedObjectContainers = newCachedObjects;
    this._cacheKeyToIndexMap = newCacheToIndexMap;
    this._currentCacheSize = newCacheSize;
};

/**
 *
 * @param container
 * @param hitCeiling
 * @returns {number}
 * @private
 */
Cache.prototype._calculateEvictionProbabilityForCacheContainer = function (container, hitCeiling) {
    'use strict';

    var containerHitCount = container.hitCount;
    var evictionProbability = (1 - (containerHitCount / hitCeiling));
    evictionProbability = Math.max(MINIMUM_EVICTION_PROBABILITY, evictionProbability);
    evictionProbability = Math.min(MAXIMUM_EVICTION_PROBABILITY, evictionProbability);

    return evictionProbability;
};
