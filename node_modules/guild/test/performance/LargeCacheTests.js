var expect = require('chai').expect;
var Cache = require('../../lib/Cache');

describe('Performance - with a cache size of 1,000,000', function () {

    this.timeout(60000);

    before(function () {

        this.largeCacheSize = 1000000;
        this.largeCache = new Cache(this.largeCacheSize);

    });

    describe('Adding items to the cache that reach the bounds exactly (1,000,000 items)', function () {

        before(function () {

            for (var i = 0; i < this.largeCacheSize; i++) {
                this.largeCache.put('key' + i, 'object' + i);
            }

        });

        it('Should indicate the correct current size (1,000,000)', function () {

            expect(this.largeCache.currentSize()).to.equal(this.largeCacheSize);

        });

        describe('When hitting the cache to randomise the cache hit for each item (where each cache hit is between 0 and 25) - this could take some time...', function () {

            before(function () {

                for (var i = 0; i < this.largeCacheSize; i++) {
                    var randomHit = Math.floor(Math.random() * 25);
                    for (var j = 0; j < randomHit; j++) {
                        this.largeCache.get('key' + i);
                    }
                }

            });

            describe('Adding 1 more item to trigger an eviction', function () {

                it('Should not take more than 1 second to complete eviction (there will be 1M items to make a decision about)', function () {

                    this.timeout(1000);
                    this.largeCache.put('key' + (this.largeCache.currentSize() + 1), 'object' + (this.largeCache.currentSize() + 1));

                });

            });

        });

    });

});
