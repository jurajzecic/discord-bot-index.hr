"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Job_1 = require("./Job");
const Display_1 = require("./Display");
const util = require("./util");
const Worker_1 = require("./Worker");
const builtInConcurrency = require("./concurrency/builtInConcurrency");
const Queue_1 = require("./Queue");
const SystemMonitor_1 = require("./SystemMonitor");
const events_1 = require("events");
const debug = util.debugGenerator('Cluster');
const DEFAULT_OPTIONS = {
    concurrency: 2,
    maxConcurrency: 1,
    workerCreationDelay: 0,
    puppeteerOptions: {
    // headless: false, // just for testing...
    },
    perBrowserOptions: undefined,
    monitor: false,
    timeout: 30 * 1000,
    retryLimit: 0,
    retryDelay: 0,
    skipDuplicateUrls: false,
    sameDomainDelay: 0,
    puppeteer: undefined,
};
const MONITORING_DISPLAY_INTERVAL = 500;
const CHECK_FOR_WORK_INTERVAL = 100;
const WORK_CALL_INTERVAL_LIMIT = 10;
let Cluster = /** @class */ (() => {
    class Cluster extends events_1.EventEmitter {
        constructor(options) {
            super();
            this.perBrowserOptions = null;
            this.workers = [];
            this.workersAvail = [];
            this.workersBusy = [];
            this.workersStarting = 0;
            this.allTargetCount = 0;
            this.jobQueue = new Queue_1.default();
            this.errorCount = 0;
            this.taskFunction = null;
            this.idleResolvers = [];
            this.waitForOneResolvers = [];
            this.browser = null;
            this.isClosed = false;
            this.startTime = Date.now();
            this.nextWorkerId = -1;
            this.monitoringInterval = null;
            this.display = null;
            this.duplicateCheckUrls = new Set();
            this.lastDomainAccesses = new Map();
            this.systemMonitor = new SystemMonitor_1.default();
            this.checkForWorkInterval = null;
            this.nextWorkCall = 0;
            this.workCallTimeout = null;
            this.lastLaunchedWorkerTime = 0;
            this.options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
            if (this.options.monitor) {
                this.monitoringInterval = setInterval(() => this.monitor(), MONITORING_DISPLAY_INTERVAL);
            }
        }
        static launch(options) {
            return __awaiter(this, void 0, void 0, function* () {
                debug('Launching');
                const cluster = new Cluster(options);
                yield cluster.init();
                return cluster;
            });
        }
        init() {
            return __awaiter(this, void 0, void 0, function* () {
                const browserOptions = this.options.puppeteerOptions;
                let puppeteer = this.options.puppeteer;
                if (this.options.puppeteer == null) { // check for null or undefined
                    puppeteer = require('puppeteer');
                }
                else {
                    debug('Using provided (custom) puppteer object.');
                }
                if (this.options.concurrency === Cluster.CONCURRENCY_PAGE) {
                    this.browser = new builtInConcurrency.Page(browserOptions, puppeteer);
                }
                else if (this.options.concurrency === Cluster.CONCURRENCY_CONTEXT) {
                    this.browser = new builtInConcurrency.Context(browserOptions, puppeteer);
                }
                else if (this.options.concurrency === Cluster.CONCURRENCY_BROWSER) {
                    this.browser = new builtInConcurrency.Browser(browserOptions, puppeteer);
                }
                else if (typeof this.options.concurrency === 'function') {
                    this.browser = new this.options.concurrency(browserOptions, puppeteer);
                }
                else {
                    throw new Error(`Unknown concurrency option: ${this.options.concurrency}`);
                }
                if (typeof this.options.maxConcurrency !== 'number') {
                    throw new Error('maxConcurrency must be of number type');
                }
                if (this.options.perBrowserOptions
                    && this.options.perBrowserOptions.length !== this.options.maxConcurrency) {
                    throw new Error('perBrowserOptions length must equal maxConcurrency');
                }
                if (this.options.perBrowserOptions) {
                    this.perBrowserOptions = [...this.options.perBrowserOptions];
                }
                try {
                    yield this.browser.init();
                }
                catch (err) {
                    throw new Error(`Unable to launch browser, error message: ${err.message}`);
                }
                if (this.options.monitor) {
                    yield this.systemMonitor.init();
                }
                // needed in case resources are getting free (like CPU/memory) to check if
                // can launch workers
                this.checkForWorkInterval = setInterval(() => this.work(), CHECK_FOR_WORK_INTERVAL);
            });
        }
        launchWorker() {
            return __awaiter(this, void 0, void 0, function* () {
                // signal, that we are starting a worker
                this.workersStarting += 1;
                this.nextWorkerId += 1;
                this.lastLaunchedWorkerTime = Date.now();
                let nextWorkerOption;
                if (this.perBrowserOptions && this.perBrowserOptions.length > 0) {
                    nextWorkerOption = this.perBrowserOptions.shift();
                }
                const workerId = this.nextWorkerId;
                let workerBrowserInstance;
                try {
                    workerBrowserInstance = yield this.browser
                        .workerInstance(nextWorkerOption);
                }
                catch (err) {
                    throw new Error(`Unable to launch browser for worker, error message: ${err.message}`);
                }
                const worker = new Worker_1.default({
                    cluster: this,
                    args: [''],
                    browser: workerBrowserInstance,
                    id: workerId,
                });
                this.workersStarting -= 1;
                if (this.isClosed) {
                    // cluster was closed while we created a new worker (should rarely happen)
                    worker.close();
                }
                else {
                    this.workersAvail.push(worker);
                    this.workers.push(worker);
                }
            });
        }
        task(taskFunction) {
            return __awaiter(this, void 0, void 0, function* () {
                this.taskFunction = taskFunction;
            });
        }
        // check for new work soon (wait if there will be put more data into the queue, first)
        work() {
            return __awaiter(this, void 0, void 0, function* () {
                // make sure, we only call work once every WORK_CALL_INTERVAL_LIMIT (currently: 10ms)
                if (this.workCallTimeout === null) {
                    const now = Date.now();
                    // calculate when the next work call should happen
                    this.nextWorkCall = Math.max(this.nextWorkCall + WORK_CALL_INTERVAL_LIMIT, now);
                    const timeUntilNextWorkCall = this.nextWorkCall - now;
                    this.workCallTimeout = setTimeout(() => {
                        this.workCallTimeout = null;
                        this.doWork();
                    }, timeUntilNextWorkCall);
                }
            });
        }
        doWork() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.jobQueue.size() === 0) { // no jobs available
                    if (this.workersBusy.length === 0) {
                        this.idleResolvers.forEach(resolve => resolve());
                    }
                    return;
                }
                if (this.workersAvail.length === 0) { // no workers available
                    if (this.allowedToStartWorker()) {
                        yield this.launchWorker();
                        this.work();
                    }
                    return;
                }
                const job = this.jobQueue.shift();
                if (job === undefined) {
                    // skip, there are items in the queue but they are all delayed
                    return;
                }
                const url = job.getUrl();
                const domain = job.getDomain();
                // Check if URL was already crawled (on skipDuplicateUrls)
                if (this.options.skipDuplicateUrls
                    && url !== undefined && this.duplicateCheckUrls.has(url)) {
                    // already crawled, just ignore
                    debug(`Skipping duplicate URL: ${job.getUrl()}`);
                    this.work();
                    return;
                }
                // Check if the job needs to be delayed due to sameDomainDelay
                if (this.options.sameDomainDelay !== 0 && domain !== undefined) {
                    const lastDomainAccess = this.lastDomainAccesses.get(domain);
                    if (lastDomainAccess !== undefined
                        && lastDomainAccess + this.options.sameDomainDelay > Date.now()) {
                        this.jobQueue.push(job, {
                            delayUntil: lastDomainAccess + this.options.sameDomainDelay,
                        });
                        this.work();
                        return;
                    }
                }
                // Check are all positive, let's actually run the job
                if (this.options.skipDuplicateUrls && url !== undefined) {
                    this.duplicateCheckUrls.add(url);
                }
                if (this.options.sameDomainDelay !== 0 && domain !== undefined) {
                    this.lastDomainAccesses.set(domain, Date.now());
                }
                const worker = this.workersAvail.shift();
                this.workersBusy.push(worker);
                if (this.workersAvail.length !== 0 || this.allowedToStartWorker()) {
                    // we can execute more work in parallel
                    this.work();
                }
                let jobFunction;
                if (job.taskFunction !== undefined) {
                    jobFunction = job.taskFunction;
                }
                else if (this.taskFunction !== null) {
                    jobFunction = this.taskFunction;
                }
                else {
                    throw new Error('No task function defined!');
                }
                const result = yield worker.handle(jobFunction, job, this.options.timeout);
                if (result.type === 'error') {
                    if (job.executeCallbacks) {
                        job.executeCallbacks.reject(result.error);
                        this.errorCount += 1;
                    }
                    else { // ignore retryLimits in case of executeCallbacks
                        job.addError(result.error);
                        const jobWillRetry = job.tries <= this.options.retryLimit;
                        this.emit('taskerror', result.error, job.data, jobWillRetry);
                        if (jobWillRetry) {
                            let delayUntil = undefined;
                            if (this.options.retryDelay !== 0) {
                                delayUntil = Date.now() + this.options.retryDelay;
                            }
                            this.jobQueue.push(job, {
                                delayUntil,
                            });
                        }
                        else {
                            this.errorCount += 1;
                        }
                    }
                }
                else if (result.type === 'success' && job.executeCallbacks) {
                    job.executeCallbacks.resolve(result.data);
                }
                this.waitForOneResolvers.forEach(resolve => resolve(job.data));
                this.waitForOneResolvers = [];
                // add worker to available workers again
                const workerIndex = this.workersBusy.indexOf(worker);
                this.workersBusy.splice(workerIndex, 1);
                this.workersAvail.push(worker);
                this.work();
            });
        }
        allowedToStartWorker() {
            const workerCount = this.workers.length + this.workersStarting;
            return (
            // option: maxConcurrency
            (this.options.maxConcurrency === 0
                || workerCount < this.options.maxConcurrency)
                // just allow worker creaton every few milliseconds
                && (this.options.workerCreationDelay === 0
                    || this.lastLaunchedWorkerTime + this.options.workerCreationDelay < Date.now()));
        }
        // Type Guard for TypeScript
        isTaskFunction(data) {
            return (typeof data === 'function');
        }
        queueJob(data, taskFunction, callbacks) {
            let realData;
            let realFunction;
            if (this.isTaskFunction(data)) {
                realFunction = data;
            }
            else {
                realData = data;
                realFunction = taskFunction;
            }
            const job = new Job_1.default(realData, realFunction, callbacks);
            this.allTargetCount += 1;
            this.jobQueue.push(job);
            this.emit('queue', realData, realFunction);
            this.work();
        }
        queue(data, taskFunction) {
            return __awaiter(this, void 0, void 0, function* () {
                this.queueJob(data, taskFunction);
            });
        }
        execute(data, taskFunction) {
            return new Promise((resolve, reject) => {
                const callbacks = { resolve, reject };
                this.queueJob(data, taskFunction, callbacks);
            });
        }
        idle() {
            return new Promise(resolve => this.idleResolvers.push(resolve));
        }
        waitForOne() {
            return new Promise(resolve => this.waitForOneResolvers.push(resolve));
        }
        close() {
            return __awaiter(this, void 0, void 0, function* () {
                this.isClosed = true;
                clearInterval(this.checkForWorkInterval);
                clearTimeout(this.workCallTimeout);
                // close workers
                yield Promise.all(this.workers.map(worker => worker.close()));
                try {
                    yield this.browser.close();
                }
                catch (err) {
                    debug(`Error: Unable to close browser, message: ${err.message}`);
                }
                if (this.monitoringInterval) {
                    this.monitor();
                    clearInterval(this.monitoringInterval);
                }
                if (this.display) {
                    this.display.close();
                }
                this.systemMonitor.close();
                debug('Closed');
            });
        }
        monitor() {
            if (!this.display) {
                this.display = new Display_1.default();
            }
            const display = this.display;
            const now = Date.now();
            const timeDiff = now - this.startTime;
            const doneTargets = this.allTargetCount - this.jobQueue.size() - this.workersBusy.length;
            const donePercentage = this.allTargetCount === 0
                ? 1 : (doneTargets / this.allTargetCount);
            const donePercStr = (100 * donePercentage).toFixed(2);
            const errorPerc = doneTargets === 0 ?
                '0.00' : (100 * this.errorCount / doneTargets).toFixed(2);
            const timeRunning = util.formatDuration(timeDiff);
            let timeRemainingMillis = -1;
            if (donePercentage !== 0) {
                timeRemainingMillis = ((timeDiff) / donePercentage) - timeDiff;
            }
            const timeRemining = util.formatDuration(timeRemainingMillis);
            const cpuUsage = this.systemMonitor.getCpuUsage().toFixed(1);
            const memoryUsage = this.systemMonitor.getMemoryUsage().toFixed(1);
            const pagesPerSecond = doneTargets === 0 ?
                '0' : (doneTargets * 1000 / timeDiff).toFixed(2);
            display.log(`== Start:     ${util.formatDateTime(this.startTime)}`);
            display.log(`== Now:       ${util.formatDateTime(now)} (running for ${timeRunning})`);
            display.log(`== Progress:  ${doneTargets} / ${this.allTargetCount} (${donePercStr}%)`
                + `, errors: ${this.errorCount} (${errorPerc}%)`);
            display.log(`== Remaining: ${timeRemining} (@ ${pagesPerSecond} pages/second)`);
            display.log(`== Sys. load: ${cpuUsage}% CPU / ${memoryUsage}% memory`);
            display.log(`== Workers:   ${this.workers.length + this.workersStarting}`);
            this.workers.forEach((worker, i) => {
                const isIdle = this.workersAvail.indexOf(worker) !== -1;
                let workOrIdle;
                let workerUrl = '';
                if (isIdle) {
                    workOrIdle = 'IDLE';
                }
                else {
                    workOrIdle = 'WORK';
                    if (worker.activeTarget) {
                        workerUrl = worker.activeTarget.getUrl() || 'UNKNOWN TARGET';
                    }
                    else {
                        workerUrl = 'NO TARGET (should not be happening)';
                    }
                }
                display.log(`   #${i} ${workOrIdle} ${workerUrl}`);
            });
            for (let i = 0; i < this.workersStarting; i += 1) {
                display.log(`   #${this.workers.length + i} STARTING...`);
            }
            display.resetCursor();
        }
    }
    Cluster.CONCURRENCY_PAGE = 1; // shares cookies, etc.
    Cluster.CONCURRENCY_CONTEXT = 2; // no cookie sharing (uses contexts)
    Cluster.CONCURRENCY_BROWSER = 3; // no cookie sharing and individual processes (uses contexts)
    return Cluster;
})();
exports.default = Cluster;
//# sourceMappingURL=data:application/json;base64,